clear all; close all; clc;

% Nathan Cramer
% PID: A15918995
% FINAL PROJECT


%% Part 1 Kinematic Simulator (NextState)

vs = [1 1 1 1 1 -.2 .2 .2 -.2]; %test to compare w parker

t_end = 1; %second
t_steps = 100; %number of steps
dt = t_end/t_steps;
vMax = 5;

x = zeros(t_steps,13);
for i = 2:t_steps
    x(i,1:12) = nextState(x(i-1, 1:12), vs, dt, vMax);
end

csvwrite("nextStateTestData.csv", x);





%% FUNCTIONS
%next state function
function state1 = nextState(state0, vels, dt, vMax)

% limit max velocities
k = length(vels);
for i = 1:k
    if abs(vels(k))>vMax
        vels(i) = sign(vels(i))*vMax
    end
end

% initialize states
state1 = state0;

l = 0.74/2;
w = 0.3/2;
r = 0.0475;

u = vels(6:end)';
q = odometry(u,w,l,r);

%chasis
for i = 1:3
    state1(i) = state0(i) + q(i);
end

%arm
for i = 4:8
    state1(i) = state0(i) + vels(i)*dt;
end

%wheel angles
for i =9:12
    state1(i) = state0(i) +vels(i-3)*dt;
end

end


% odometry (from book)
function qk_1 = odometry(u, w, l, r)
    M = [-1/(l + w) 1/(l + w) 1/(l + w) -1/(l + w);
         1 1 1 1;
         -1 1 -1 1];

    V = r/4 .* (M * u);
    w = V(1);
    vx = V(2);
    vy = V(3);
    
    if w == 0
        dq_b = [0, vx, vy]';
    else
        dq_b = [w, (vx*sin(w) + vy*(cos(w) - 1))/w, (vy*sin(w) + vx*(1 - cos(w)))/w]';
    end
    R = [1 0 0;
       0 cos(w) -sin(w);
       0 sin(w) cos(w)];
    qk_1 = R*dq_b;
end





